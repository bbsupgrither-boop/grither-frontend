import React, { useRef } from 'react';
import { Upload, X, Image as ImageIcon } from 'lucide-react';
import { ImageWithFallback } from './figma/ImageWithFallback';

interface ImageUploaderProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  defaultEmoji?: string;
  className?: string;
  acceptEmojiOnly?: boolean;
}

export function ImageUploader({ 
  value, 
  onChange, 
  placeholder = '–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª',
  defaultEmoji = 'üì∑',
  className = '',
  acceptEmojiOnly = false
}: ImageUploaderProps) {
  const fileInputRef = useRef<HTMLInputElement>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ URL –∏–ª–∏ base64
  const isImageUrl = (str: string) => {
    try {
      new URL(str);
      return str.startsWith('http://') || str.startsWith('https://') || str.startsWith('data:');
    } catch {
      return false;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –≤ base64
  const convertFileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
      if (!file.type.startsWith('image/')) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
        return;
      }

      try {
        const base64 = await convertFileToBase64(file);
        onChange(base64);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const clearImage = () => {
    onChange(defaultEmoji);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —ç–º–æ–¥–∑–∏
  const ImageDisplay = ({ src, className = '', style = {} }: { src: string; className?: string; style?: React.CSSProperties }) => {
    if (isImageUrl(src)) {
      return (
        <ImageWithFallback
          src={src}
          alt="Uploaded image"
          className={`${className} object-cover`}
          style={style}
        />
      );
    }
    return (
      <div className={`flex items-center justify-center ${className}`} style={style}>
        <span className="text-xl">{src}</span>
      </div>
    );
  };

  return (
    <div className={`space-y-3 ${className}`}>
      {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      {!acceptEmojiOnly && (
        <div className="flex gap-2">
          <button
            type="button"
            onClick={() => fileInputRef.current?.click()}
            className="flex-1 flex items-center justify-center gap-2 px-3 py-2 bg-primary/10 text-primary border border-primary/20 rounded-lg hover:bg-primary/20 transition-colors"
          >
            <Upload className="w-4 h-4" />
            –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
          </button>
          <button
            type="button"
            onClick={() => {
              const emoji = prompt('–í–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏:', defaultEmoji);
              if (emoji) {
                onChange(emoji);
              }
            }}
            className="flex-1 flex items-center justify-center gap-2 px-3 py-2 bg-surface-2 text-foreground border border-border rounded-lg hover:bg-surface-3 transition-colors"
          >
            <span className="text-lg">üòÄ</span>
            –≠–º–æ–¥–∑–∏
          </button>
        </div>
      )}

      {/* –°–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –∏–Ω–ø—É—Ç */}
      <input
        ref={fileInputRef}
        type="file"
        accept="image/*"
        onChange={handleFileUpload}
        className="hidden"
      />

      {/* –ü–æ–ª–µ –¥–ª—è URL/—Ç–µ–∫—Å—Ç–∞ */}
      <input
        type="text"
        value={value}
        onChange={(e) => onChange(e.target.value)}
        className="w-full px-3 py-2 bg-input-background border border-border rounded-lg"
        placeholder={placeholder}
      />
      
      <div className="text-xs text-muted-foreground">
        {acceptEmojiOnly 
          ? '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç'
          : '–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –∏–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å URL/base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
        }
      </div>

      {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
      {value && (
        <div className="flex items-center gap-2">
          <span className="text-xs text-muted-foreground">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</span>
          <div className="w-12 h-12 rounded border overflow-hidden relative bg-surface-2">
            <ImageDisplay
              src={value}
              className="w-full h-full"
            />
            {/* –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
            {isImageUrl(value) && (
              <button
                type="button"
                onClick={clearImage}
                className="absolute -top-1 -right-1 w-5 h-5 bg-destructive text-destructive-foreground rounded-full flex items-center justify-center hover:bg-destructive/80 transition-colors text-xs"
              >
                <X className="w-3 h-3" />
              </button>
            )}
          </div>
          {isImageUrl(value) && (
            <div className="text-xs text-muted-foreground">
              {value.startsWith('data:') ? '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª' : 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
            </div>
          )}
        </div>
      )}
    </div>
  );
}