# GRITHER - Deployment Setup Guide

## üöÄ –≠—Ç–∞–ø—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

### –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Frontend (–ì–û–¢–û–í–û)
- ‚úÖ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
- ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
- ‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
- ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω

### –≠—Ç–∞–ø 2: Frontend Deployment (–°–ï–ô–ß–ê–°)
```bash
# 1. –î–µ–ø–ª–æ–π –Ω–∞ Vercel (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
npm install -g vercel
vercel --prod

# 2. –ò–ª–∏ –Ω–∞ Netlify
npm run build
# –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å dist/ –Ω–∞ netlify.com
```

### –≠—Ç–∞–ø 3: Telegram Bot Setup
```bash
# –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather
/newbot
# –ò–º—è: GRITHER Bot
# Username: grither_app_bot

# –ü–æ–ª—É—á–∏—Ç—å Bot Token
# –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Web App URL –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
/setmenubutton
```

### –≠—Ç–∞–ø 4: Backend Development
```
Backend Stack:
- Node.js + Express/Fastify
- PostgreSQL (–∏–ª–∏ Supabase)
- Telegram Bot API
- JWT Authentication
```

### –≠—Ç–∞–ø 5: Database Schema
```sql
-- Users table
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  telegram_id BIGINT UNIQUE NOT NULL,
  username VARCHAR(255),
  first_name VARCHAR(255),
  last_name VARCHAR(255),
  level INTEGER DEFAULT 1,
  experience INTEGER DEFAULT 0,
  balance INTEGER DEFAULT 1000,
  avatar_url TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- –ò –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞–¥–∞—á, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –±–∞—Ç—Ç–ª–æ–≤...
```

### –≠—Ç–∞–ø 6: CI/CD Pipeline
```yaml
# .github/workflows/deploy.yml
name: Deploy
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - run: npm install
      - run: npm run build
      - uses: amondnet/vercel-action@v20
```

## üõ†Ô∏è Immediate Next Steps

1. **Deploy Current Version**
   - –ü–æ–ª—É—á–∏—Ç—å HTTPS URL
   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram Web App

2. **Create Bot**
   - –ü–æ–ª—É—á–∏—Ç—å Bot Token
   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã

3. **Setup Database**
   - –°–æ–∑–¥–∞—Ç—å Supabase –ø—Ä–æ–µ–∫—Ç
   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ö–µ–º—É –ë–î

4. **Backend API**
   - –°–æ–∑–¥–∞—Ç—å API endpoints
   - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Telegram

5. **Real-time Updates**
   - WebSockets –∏–ª–∏ Server-Sent Events
   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

## üì± Telegram Web App Integration

–ü–æ—Å–ª–µ –¥–µ–ø–ª–æ—è:
```javascript
// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
if (window.Telegram?.WebApp) {
  const tg = window.Telegram.WebApp;
  const user = tg.initDataUnsafe?.user;
  
  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  fetch('/api/auth/telegram', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      initData: tg.initData,
      user: user
    })
  });
}
```

## üîÑ Development Workflow

–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:

1. **Git-based workflow**
   ```bash
   git add .
   git commit -m "Update features"
   git push origin main
   # Auto-deploy via Vercel/Netlify
   ```

2. **Admin Panel** (—É–∂–µ –µ—Å—Ç—å)
   - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
   - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
   - –ú–æ–¥–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

3. **Hot Config**
   - –ö–æ–Ω—Ñ–∏–≥ –≤ –ë–î –≤–º–µ—Å—Ç–æ –∫–æ–¥–∞
   - API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
   - Realtime –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket

## üíæ Data Migration Plan

localStorage ‚Üí Database:
1. Export current localStorage data
2. Create migration scripts
3. Import to PostgreSQL/Supabase
4. Update API calls
5. Remove localStorage dependencies